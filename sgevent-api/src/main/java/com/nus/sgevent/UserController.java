package com.nus.sgevent;

import java.util.Date;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.server.ResponseStatusException;
import org.springframework.web.bind.annotation.PathVariable;
import com.nus.sgevent.entity.*;
import com.nus.sgevent.repository.*;


@Controller	// This means that this class is a Controller
@RequestMapping(path="/v1/eventuser")
public class UserController {
	@Autowired // This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	private RoleRepository roleRepository;

	@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String userid
			, @RequestParam String password
			, @RequestParam int activeflag
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		EventUser n = new EventUser();
		n.setUserId(userid);
		n.setPassword(password);
		n.setCreateTime(new Date());
		n.setRoleId(1);
		n.setUserName(name);
		n.setEmailAddress(email);
		userRepository.save(n);
		
		return "Saved";
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<EventUser> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
	
	@GetMapping("/{userid}")  
	public userObj retrieveEventUser(@PathVariable("userid") String userid)   
	{  
		userObj UserFound = new userObj();
		EventUser evuser=userRepository.SearchEventUser(userid);
		UserFound.setUserName(evuser.getUserName());
		UserFound.setActiveStatus(evuser.getActiveStatus());
		UserFound.setCreateTime(evuser.getCreateTime());
		UserFound.setEmailAddress(evuser.getEmailAddress());
		UserFound.setPassword(evuser.getPassword());
		UserFound.setRoleId(evuser.getRoleId());
		UserFound.setUserId(evuser.getUserId());
		UserRole evrole = roleRepository.SearchUserRole(evuser.getRoleId());
		UserFound.setRoleName(evrole.getRoleName());
		UserFound.setPermission(evrole.getPermission());
		
	return UserFound;  
	} 
	
	@GetMapping(path="/UserLogin")
	public String checkUserLogin(@PathVariable("userid") String userid,@PathVariable("password") String password)
	{
		if (userRepository.checkUserLogin(userid, password).size()>0)
		return "success";
		else
		{
				throw new ResponseStatusException(
				  HttpStatus.NOT_FOUND, "Incorrect username or password"
				);
		}
		
	}
}
